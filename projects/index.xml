<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on apiercey.github.io</title><link>https://apiercey.github.io/projects/</link><description>Recent content in Projects on apiercey.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>alexander.piercey@gmail.com (Alexander Butt-Piercey)</managingEditor><webMaster>alexander.piercey@gmail.com (Alexander Butt-Piercey)</webMaster><lastBuildDate>Fri, 06 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://apiercey.github.io/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>RygelDB</title><link>https://apiercey.github.io/projects/rygel-db/</link><pubDate>Mon, 09 Aug 2021 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/projects/rygel-db/</guid><description>RygelDB RygelDB is a NoSQL document store using commands to store and query documents!
What the Yotz?! - Dominar Rygel the XVI
Usage Storing and Querying Data Defining Collections Removing Collections Storing Data Querying data Remove data Update data Where Predicates Usage Run go run . or go build ., as you like.
1$ go run . 2 3Starting tcp server on localhost:8080 You can connect using a socket once it has started like so:</description></item><item><title>Zardoz</title><link>https://apiercey.github.io/projects/zardoz/</link><pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/projects/zardoz/</guid><description>ZARDOZ A Golang testing framework for testing asyncronous dependencies.
Table of Contents Installation Usage Test Assertions t.Assert t.AssertSync t.AssertAsync Working Example Reading results Setup and Cleanup Installation Pull the module into your GOPATH using
1go get github.com/apiercey/zardoz Usage ZARDOZ can be imported like so:
1import z &amp;#34;github.com/APiercey/zardoz&amp;#34; ZARDOZ comes with three assertions for testing asyncronous dependencies. Test blocks begin with a Describe block, which provides a test suite.
1func main() { 2 z.</description></item><item><title>Mylalang</title><link>https://apiercey.github.io/projects/mylalang/</link><pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/projects/mylalang/</guid><description>Mylalang Mylalang is a LISP implemented in Rust.
TODO: Document head and tail Content Content Usage Interactive REPL Interpreter Types Arithmetic Operators List Processing Relational Operators Comments Binding values Functions Named Functions Anonymous Functions Local Binding Function Overloading Aliasing Inspecting The do Function Conditionals Files Reading Files Importing Recursion and Loops The cons Function The list Function : Operator The &amp;amp; Operator and the apply Function Evaluating Code Complex Example Native functions min max double reduce map Table of contents generated with markdown-toc</description></item><item><title>SocialTeach</title><link>https://apiercey.github.io/projects/social-teach/</link><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/projects/social-teach/</guid><description>Proving Gamification as a Service During my time at Passion.io, we wanted to prove we Gamification as a Service was firstly possible, and secondaly scalable.
If succesful, there was a desire to integrate such a tool into our own product line. From this, SocialTeach was born and registered as a subsidiary, where I was required to lead the technical vision of the system.
After succesfully pitching the idea of, &amp;ldquo;Building a platform that learns as you interact with it and provides gamified content in any given content-based system&amp;rdquo;, at the Quality and Usability Lab of the Technical Universtity of Berlin, we began development of the system with a brilliant group of students.</description></item></channel></rss>