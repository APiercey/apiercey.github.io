<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technology Visionary on apiercey.github.io</title><link>https://apiercey.github.io/</link><description>Recent content in Technology Visionary on apiercey.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>alexander.piercey@gmail.com (Alexander Butt-Piercey)</managingEditor><webMaster>alexander.piercey@gmail.com (Alexander Butt-Piercey)</webMaster><lastBuildDate>Wed, 16 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://apiercey.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>My Teacher</title><link>https://apiercey.github.io/posts/my-teacher/</link><pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/posts/my-teacher/</guid><description>A while back I had shared this story as a message in Slack with some colleagues. I was encouraged to publish it but never had a chance to do so until now. I hope you enjoy it :).
My Teacher I&amp;rsquo;m currently reading this article by Martin Fowler on Continuous Integration (which I would always recommend anyone to read)!
His opening story about the dangers of integrating parts of software reminded me of an experience I once had.</description></item><item><title>Event Sourcing with Ruby and AWS Serverless Technologies - Part Four: Aggregate Persistence</title><link>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/aggregate-persistence/</link><pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/aggregate-persistence/</guid><description>This is the fourth part in an on-going blog series about building an event sourcing system in Ruby using AWS Serverless technologies.
The persistence of values and complex objects is essential to modern applications. Applications that take tremendous care of how their objects actually pass in-and-out of memory tend to perform far better than those that don&amp;rsquo;t - especially in the face of changing and growing requirements.
This article covers how to implement aggregate persistence using the Repository pattern.</description></item><item><title>Event Sourcing with Ruby and AWS Serverless Technologies - Part Three: The Event Store and DynamoDB</title><link>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/event-store-dynamodb-tables/</link><pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/event-store-dynamodb-tables/</guid><description>This is the third part in an on-going blog series about building an event sourcing system in Ruby using AWS Serverless technologies.
It was originally part of Aggregate Persistence. It grew a little bit too large for my tastes and I opted to separate this portion into it&amp;rsquo;s own article. Enjoy!
In event sourcing, events are stored in a database called an event store. Weâ€™ll design one using AWS Serverless technologies and it will be the backbone of future articles that extend the event store.</description></item><item><title>Event Sourcing with Ruby and AWS Serverless Technologies - Part Two: Aggregate Design</title><link>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/aggregate-design/</link><pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/aggregate-design/</guid><description>This is the second part in an on-going blog series about building an event sourcing system in Ruby using AWS Serverless technologies.
Aggregate design is at the center of how event sourcing systems operate. They encapsulate our events into a greater meaning than the sum of its parts.
We will implement our ShoppingCart aggregate, the events it publishes, and how these events are applied to alter its state. This will be the foundation of our system.</description></item><item><title>Event Sourcing with Ruby and AWS Serverless Technologies - Part One: System Design</title><link>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/system-design/</link><pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/system-design/</guid><description>This is the first part in an on-going blog series about building an event sourcing system in Ruby using AWS Serverless technologies.
The Idea of a Shopping Cart The idea of a Shopping Cart gives us a nice foundation for building an event sourced system. It is a familiar concept and introduces a type of temporal model, which helps solves problems with our data changing over time.
For example, when shoppers come to your site to purchase merchandise, you may want to know when they Add an Item to an Open Cart (a change) so related items can be suggested to them.</description></item><item><title>Event Sourcing with Ruby and AWS Serverless Technologies - Introduction</title><link>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/introduction/</link><pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/introduction/</guid><description>Developing software that solves complex problems can be challenging at times. Often, the literature around solving these problems makes it even harder to see the solution through the trees!
This blog series aims at being a pragmatic take on building an event sourcing system by leveraging AWS Serverless technologies. It is by no means a complete guide but provides concrete patterns that you can use while building your own. Moreover, you&amp;rsquo;ll find that these patterns can be used in other architectures as well.</description></item><item><title>6 Line Micro Testing Framework</title><link>https://apiercey.github.io/posts/6-line-micro-testing-framework/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/posts/6-line-micro-testing-framework/</guid><description>Normally, I try to write tests for every project I participate in, even personal projects that never see the light of day! Yet, every once in a while, I find myself working in an environment where adding new dependencies isn&amp;rsquo;t so straightforward or tools like RSpec are a bit too bulky. In such cases, I quickly produce a few functions that allow me to execute automated tests.
In Ruby, it&amp;rsquo;s quite compact and pleasant.</description></item><item><title>Building a Simple Database</title><link>https://apiercey.github.io/posts/building-a-database/</link><pubDate>Mon, 09 Aug 2021 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/posts/building-a-database/</guid><description>EDIT: After digesting what I have learned from Golang and this project, I have largely rebuilt RygelDB. I&amp;rsquo;ll update this blog article once I find the time.
A colleague once said to me, &amp;ldquo;Let&amp;rsquo;s learn Rust and build a NoSql Database! It&amp;rsquo;s easy!&amp;rdquo;
Through group learning sessions, we did learn Rust but we never did build that database. Unfortunately, the precious time we had was consumed by other responsibilities, and after some years, we no longer have delight of working together as he is currently working on some other seriously cool stuff, elsewhere!</description></item><item><title>RygelDB</title><link>https://apiercey.github.io/projects/rygel-db/</link><pubDate>Mon, 09 Aug 2021 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/projects/rygel-db/</guid><description>RygelDB RygelDB is a NoSQL document store using commands to store and query documents!
What the Yotz?! - Dominar Rygel the XVI
Usage Storing and Querying Data Defining Collections Removing Collections Storing Data Querying data Remove data Update data Where Predicates Usage Run go run . or go build ., as you like.
1$ go run . 2 3Starting tcp server on localhost:8080 You can connect using a socket once it has started like so:</description></item><item><title>Zardoz</title><link>https://apiercey.github.io/projects/zardoz/</link><pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/projects/zardoz/</guid><description>ZARDOZ A Golang testing framework for testing asyncronous dependencies.
Table of Contents Installation Usage Test Assertions t.Assert t.AssertSync t.AssertAsync Working Example Reading results Setup and Cleanup Installation Pull the module into your GOPATH using
1go get github.com/apiercey/zardoz Usage ZARDOZ can be imported like so:
1import z &amp;#34;github.com/APiercey/zardoz&amp;#34; ZARDOZ comes with three assertions for testing asyncronous dependencies. Test blocks begin with a Describe block, which provides a test suite.
1func main() { 2 z.</description></item><item><title>Mylalang</title><link>https://apiercey.github.io/projects/mylalang/</link><pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/projects/mylalang/</guid><description>Mylalang Mylalang is a LISP implemented in Rust.
TODO: Document head and tail Content Content Usage Interactive REPL Interpreter Types Arithmetic Operators List Processing Relational Operators Comments Binding values Functions Named Functions Anonymous Functions Local Binding Function Overloading Aliasing Inspecting The do Function Conditionals Files Reading Files Importing Recursion and Loops The cons Function The list Function : Operator The &amp;amp; Operator and the apply Function Evaluating Code Complex Example Native functions min max double reduce map Table of contents generated with markdown-toc</description></item><item><title>Using Commanded + Flow to Create a Fault-Tolerant System</title><link>https://apiercey.github.io/articles/elixir-meetup-num-63-create-fault-tolarent-system/</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/articles/elixir-meetup-num-63-create-fault-tolarent-system/</guid><description>Meetup Presentation @ SolarisBank for Elixir Meetup #63 For Elixir Meetup #63 I presented how fault-tolarent can be built using Commanded + Flow, showcasing how they can be used together. We had a great turn out with SolarisBank hosting.
My team mate, Gui, had a great lightning talk describing the Elixir tool Boundary and it&amp;rsquo;s importance in building business-first applications.</description></item><item><title>SolarisBank Diversity Sponsor at ElixirConf Europe 2019</title><link>https://apiercey.github.io/articles/solarisbank-elixir-conf-2019-diversity-sponsor/</link><pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/articles/solarisbank-elixir-conf-2019-diversity-sponsor/</guid><description>Diversity Sponsor SolarisBank was a Diversity Sponsor for ElixirConf Europe 2019 and I had the great opportunity to join some of my colleagues to host a small table and part-take in the talks!
Visit our Diversity sponsor @solarisBank at #ElixirConfEU and learn about their banking API, they are hiring for diversity with or without Elixir experience! pic.twitter.com/8CQuZANL9a
&amp;mdash; ElixirConf Europe (@ElixirConfEU) April 9, 2019</description></item><item><title>SocialTeach</title><link>https://apiercey.github.io/projects/social-teach/</link><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/projects/social-teach/</guid><description>Proving Gamification as a Service During my time at Passion.io, we wanted to prove we Gamification as a Service was firstly possible, and secondaly scalable.
If succesful, there was a desire to integrate such a tool into our own product line. From this, SocialTeach was born and registered as a subsidiary, where I was required to lead the technical vision of the system.
After succesfully pitching the idea of, &amp;ldquo;Building a platform that learns as you interact with it and provides gamified content in any given content-based system&amp;rdquo;, at the Quality and Usability Lab of the Technical Universtity of Berlin, we began development of the system with a brilliant group of students.</description></item><item><title>Runner-Up of Standalone Project - Applied Research Day 13.0</title><link>https://apiercey.github.io/articles/applied-research-day-13-0/</link><pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/articles/applied-research-day-13-0/</guid><description>It was my pleaseure to be apart of Runner-Up team accepting the Award of Excellence for Applied Research Day 12.1 for a Stand-Alone Project.
Shout-out to MicroMetrics for the wonderful support and opportunity and my team mates on the extrodinary work put forward.
An article about the event from the Office of Applied Research can be found here: https://www.algonquincollege.com/arie/2015/04/applied-research-day-13-0/</description></item><item><title>Third Place - Applied Research Day 12.2</title><link>https://apiercey.github.io/articles/applied-research-day-12-2/</link><pubDate>Fri, 22 Aug 2014 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/articles/applied-research-day-12-2/</guid><description>After a long-day of competition, the MicroMetrics Applied Research team accepted Third-Place for the Award of Excellence. Thanks for the fun and hard work.
An article about the event from the Office of Applied Research can be found here: https://www.algonquincollege.com/arie/2014/12/applied-research-day-12-2/</description></item><item><title>Winners of Applied Research Day 12.1</title><link>https://apiercey.github.io/articles/applied-research-day-12-1/</link><pubDate>Fri, 22 Aug 2014 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/articles/applied-research-day-12-1/</guid><description>It was my pleaseure to be apart of the First Place team accepting the Award of Excellence for Applied Research Day 12.1
Shout-out to MicroMetrics for the wonderful support and opportunity and my team mates on the extrodinary work put forward.
An article about the event from the Office of Applied Research can be found here: https://www.algonquincollege.com/news/2014/08/22/winners-of-applied-research-day-12-1/</description></item><item><title>About</title><link>https://apiercey.github.io/pages/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/pages/about/</guid><description>Who am I? I am Alexander Butt-Piercey, a Software Engineer and Technical Leader. I have had the pleasure to be a member of award-winning applied research teams, help build succesful startups - some reaching unicorn status, lead development in NFPs, and mentor younger professionals into blossoming careers. At the moment, I work in an incredible team at Solarisbank shipping innovative software in the digital banking space.
My interests in Software Development is in Lean Practicies, Domain Driven Design, Technical Leadership, and Continous Delivery.</description></item></channel></rss>