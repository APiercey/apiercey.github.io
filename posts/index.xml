<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on apiercey.github.io</title><link>https://apiercey.github.io/posts/</link><description>Recent content in Blog on apiercey.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>alexander.piercey@gmail.com (Alexander Butt-Piercey)</managingEditor><webMaster>alexander.piercey@gmail.com (Alexander Butt-Piercey)</webMaster><lastBuildDate>Sat, 07 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://apiercey.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Event Sourcing with Ruby and AWS Serverless Technologies - Part Two: Aggregate Design</title><link>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/aggregate-design/</link><pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/aggregate-design/</guid><description>This is the second part in an on-going blog series about building an event sourcing system in Ruby using AWS Serverless technologies.
Aggregate design is at the center of how event sourcing systems operate. They encapsulate our events into a greater meaning than the sum of its parts.
We will implement our ShoppingCart aggregate, the events it publishes, and how these events are applied to alter its state. This will be the foundation of our system.</description></item><item><title>Event Sourcing with Ruby and AWS Serverless Technologies - Part One: System Design</title><link>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/system-design/</link><pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/system-design/</guid><description>This is the first part in an on-going blog series about building an event sourcing system in Ruby using AWS Serverless technologies.
The Idea of a Shopping Cart The idea of a Shopping Cart gives us a nice foundation for building an event sourced system. It is a familiar concept and introduces a type of temporal model, which helps solves problems with our data changing over time.
For example, when shoppers come to your site to purchase merchandise, you may want to know when they Add an Item to an Open Cart (a change) so related items can be suggested to them.</description></item><item><title>Event Sourcing with Ruby and AWS Serverless Technologies - Introduction</title><link>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/introduction/</link><pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/posts/event-sourcing-using-ruby-and-aws-serverless-technologies/introduction/</guid><description>Developing software that solves complex problems can be challenging at times. Often, the literature around solving these problems makes it even harder to see the solution through the trees!
This blog series aims at being a pragmatic take on building an event sourcing system by leveraging AWS Serverless technologies. It is by no means a complete guide but provides concrete patterns that you can use while building your own. Moreover, you&amp;rsquo;ll find that these patterns can be used in other architectures as well.</description></item><item><title>6 Line Micro Testing Framework</title><link>https://apiercey.github.io/posts/6-line-micro-testing-framework/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/posts/6-line-micro-testing-framework/</guid><description>Normally, I try to write tests for every project I participate in, even personal projects that never see the light of day! Yet, every once in a while, I find myself working in an environment where adding new dependencies isn&amp;rsquo;t so straightforward or tools like RSpec are a bit too bulky. In such cases, I quickly produce a few functions that allow me to execute automated tests.
In Ruby, it&amp;rsquo;s quite compact and pleasant.</description></item><item><title>Building a Simple Database</title><link>https://apiercey.github.io/posts/building-a-database/</link><pubDate>Mon, 09 Aug 2021 00:00:00 +0000</pubDate><author>alexander.piercey@gmail.com (Alexander Butt-Piercey)</author><guid>https://apiercey.github.io/posts/building-a-database/</guid><description>EDIT: After digesting what I have learned from Golang and this project, I have largely rebuilt RygelDB. I&amp;rsquo;ll update this blog article once I find the time.
A colleague once said to me, &amp;ldquo;Let&amp;rsquo;s learn Rust and build a NoSql Database! It&amp;rsquo;s easy!&amp;rdquo;
Through group learning sessions, we did learn Rust but we never did build that database. Unfortunately, the precious time we had was consumed by other responsibilities, and after some years, we no longer have delight of working together as he is currently working on some other seriously cool stuff, elsewhere!</description></item></channel></rss>